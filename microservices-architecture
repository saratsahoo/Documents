
microservices-architecture
============================

Architecture = (elements + relations + properties)

4 view model
Logical view
Implementation View
Process View
Deploymnet View


Context: You’re designing a server-side, multi-user application. You want your application to be
modular, and you want the modules to be independent. Your application modules need to be
capable of composition, scalability, and continuous deployment.

Microservices can be deployed independently with zero downtime for continuous
deployment. Microservices can scale and fail independently. Microservices developed and
deployed independently will tend to become and remain separate modules.





What is a Microservice?

Microservices is an application architectural style in which an application is composed of many
discrete, network-connected components, termed microservices. The microservices architecturalstyle can be seen as an evolution of the SOA (Services Oriented Architecture) architectural style.
The key differences between the two are that while applications built using SOA services tended
to become focused on technical integration issues, and the level of the services implemented were
often very fine-grained technical APIs, the microservices approach instead stay focused on
implementing clear business capabilities through larger-grained business APIs.



When you look at the implications of this, you see that five simple rules drive the implementation
of applications built using the microservices architecture. They are:





Break large monoliths down into many small services -- A single network-accessible
service is the smallest deployable unit for a microservices application. Each service
should run in its own process. This rule is sometimes stated as “one service per
container”, where “container” could mean a Docker container or any other lightweight
deployment mechanism such as a Cloud Foundry runtime.
Optimize services for a single function – In a traditional monolithic SOA approach a
single application runtime would perform multiple business functions. In a microservices
approach, there should be one and only one business function per service. This makes
each service smaller and simpler to write and maintain. Robert Martin calls this the
“Single Reponsibility Principle”.
Communicate via REST API and message brokers – One of the drawbacks of the SOA
approach was that there was an explosion of standards and options for implementing SOA
services. The microservices approach instead tries to strictly limit the types of network
connectivity that a service can implement to achieve maximum simplicity. Likewise,
another rule for microservices is to avoid the tight coupling introduced by implicit
communication through a database – all communication from service to service must be
through the service API or at least must use an explicit communication pattern such as the
Claim Check Pattern from [Hohpe].
Apply Per-service CI/CD -- When building a large application comprised of many
services, you soon realize that different services evolve at different rates. Letting each
service have its own unique Continuous Integration/Continuous Delivery pipeline allows
that evolution to proceed at is own natural pace – unlike in the monolithic approach where
different aspects of the system were forced to all be released at the speed of the slowest-
moving part of the system.
Apply Per-service HA/clustering decisions – Another realization when building large
systems is that when it comes to clustering, not one size fits all. The monolithic approach
of scaling all the services in the monolith at the same level often led to overutilization of
some servers and underutilization of others – or even worse, starvation of some services by
others when they monopolized all of the available shared resources such as thread pools.
The reality is that in a large system, not all services need to scale and can be deployed in a
Implementation Patterns for Microservices Architectures: Page - 2minimum number of servers to conserve resources. Others require scaling up to very large
numbers.
The power of the combination of these points (each of which will be referenced in the patterns
below) and the benefits obtained from following them is the primary reason why the
microservices architecture has become so popular.





WHY
=====

Maintainability
Scalability
Security
Evolvability
Testability
Deployablility
Reliability
Build better software faster
Reducing lead time
Increasing Deployment frequency
Agile development becomes impossible
Technology stacks becomes obsolete and rewrite becomes impossible
gives loosly coupled
can be used different technology stacks
Team own services





When using microservices:
==============================
How to decompose an application into services?
How to deploy an application’s services?
How to handle cross cutting concerns?
Which communication mechanisms to use?
How do external clients communicate with the services?
How does a client discover the network location of a service instance?
How to prevent a network or service failure from cascading to other services?
How to maintain data consistency and implement queries?
How to understand the behavior of an application and troubleshoot problems?
How to make testing easier?
How to implement a UI screen or page that displays data from multiple services?



It depends....


In our pattern language we introduce each section with
one of 

four root patterns: 
=======================
Each application is different and they have different issues to target(application specific design).

1. Modern Web Architecture Patterns
  a. near cache
  b. single page application, native mobile application
  c. router
  
2. Microservices Architecture Patterns
  * backend for frontend - Page cache
  * Adapter microservice, business microservice
  * Results cache
  * Service Registry
  * Schema Registry
  * intelligent gateway & routing (API and static)
  * cercuit breaker
  * Security & Sessions
  Orchestration
  Translation
  Filtering
  Read / Write / Cached Service Seggrigation
  Event driven Update / Architecture
  

3. Scalable Store Patterns
  * A service should have it's own database to scale independently, and they communicate through events.
  * Document store, key-value store
  * CQRS (Command and Query Responsibility Segregation) Read/Write Seggrigation
  

4. Microservices DevOps Patterns
  a. log aggregator, correlation id, tracing, event logging, call graph (Splunk, Logstash and ELK, and the Cloud
Foundry Loggregator or DB logging mq)
  b. Per Service CI/CD and Per-Service HA and clustering, load balancing.
  c. cloud or on-premise
  d. may require provisoning more physical / private servers for high performance.
  e. docker can ease deployment complexity
  
  




Adapter Microservice

Context: You are designing an application using a Microservices Architecture. You want it to
incorporate existing services (e.g. SOAP, JMS, or mainframe-based services) but their APIs do
not use the RESTful or queue-based approach that is consistent with the microservices
architecture.


A Results Cache can be as simple as a Key-Value Store (either in-memory or in a
Scalable Store).


Page Cache
Context: You are building a web or mobile application using a Microservices Architecture. You
are applying the Backend for Frontends Pattern to build dispatchers for a web or mobile
application.


Results: For very long datasets, a Page Cache is preferable to fetching all the data at once and
storing it in a Near Cache since you can render the first set of information more quickly – and in
many cases, the user will never scroll past the first page of information.

SCALABLE STORE PATTERNS
A key part of the microservices architecture is that wherever possible each microservice should
control or “own” its own data.


The key here is that the database must be naturally distributed and able both to scale horizontally
and to survive the failure of a database node. For the last several years, that has driven developers
to the concept of “NoSQL” databases as described in [Sadalage]. Examples of this type of
database include Redis, Cloudant, Memcached.


However, quite recently a number of new distributed databases based on the relational model and
collectively called “NewSQL” have also become available. These include options like Clustrix,
MemSQL, or even MySQL cluster. NoSQL databases are typically less efficient at SQL-like
queries because of differences in approaches to query optimization. So, if your application
depends on SQL-centric complex query capability then a solution such as a NewSQL database or
a distributed in-memory SQL database may be more efficient.



Document Store
Context: You are building applications with a Microservices Architecture. You are using
RESTful API’s and representing the contents of your HTTP requests and responses as JSON
(Javascript Object Notation) documents.
Problem: How do you most efficiently store and retrieve the data corresponding to your HTTP
responses?
For instance, in MongoDB the basic construct is a collection of JSON documents



Service Registry
Context: You are building applications using a Microservices Architecture. You have many
different Business Microservices comprising your application.

Examples include IBM Bluemix’s Service Discovery, Netflix Eureka and the Amalgam8 Registry.
